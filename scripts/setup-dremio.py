#!/usr/bin/env python3
"""
Script pour configurer automatiquement Dremio via l'API REST
"""
import requests
import json
import time
import sys

DREMIO_URL = "http://localhost:9047"
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "admin123"
NEW_USER_USERNAME = "dremio_user"
NEW_USER_PASSWORD = "dremio_pass123"  # Au moins 8 caract√®res avec 1 chiffre

def wait_for_dremio():
    """Attendre que Dremio soit pr√™t"""
    print("‚è≥ Attente que Dremio soit pr√™t...")
    for i in range(30):
        try:
            response = requests.get(f"{DREMIO_URL}/", timeout=2)
            if response.status_code == 200:
                print("‚úÖ Dremio est pr√™t")
                return True
        except:
            pass
        time.sleep(2)
        print(f"   Tentative {i+1}/30...")
    print("‚ùå Dremio ne r√©pond pas")
    return False

def check_first_time_setup():
    """V√©rifier si c'est la premi√®re configuration"""
    try:
        response = requests.get(f"{DREMIO_URL}/apiv2/bootstrap/firstuser", timeout=5)
        # Si 200, premi√®re configuration n√©cessaire
        # Si 401/403, d√©j√† configur√©
        return response.status_code == 200
    except:
        return False

def create_first_user():
    """Cr√©er le premier utilisateur admin"""
    print("üîß Cr√©ation du premier utilisateur admin...")
    
    payload = {
        "userName": ADMIN_USERNAME,
        "firstName": "Admin",
        "lastName": "User",
        "email": "admin@example.com",
        "password": ADMIN_PASSWORD
    }
    
    try:
        response = requests.put(
            f"{DREMIO_URL}/apiv2/bootstrap/firstuser",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code in [200, 201]:
            print(f"‚úÖ Utilisateur admin cr√©√©: {ADMIN_USERNAME}")
            return True
        else:
            print(f"‚ö†Ô∏è R√©ponse: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'admin: {e}")
        return False

def login(username, password):
    """Se connecter √† Dremio et obtenir un token"""
    print(f"üîê Connexion en tant que {username}...")
    
    payload = {
        "userName": username,
        "password": password
    }
    
    try:
        response = requests.post(
            f"{DREMIO_URL}/apiv2/login",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            token = response.json().get("token")
            print(f"‚úÖ Connexion r√©ussie")
            return token
        else:
            print(f"‚ùå √âchec de connexion: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return None

def create_user(token, username, password):
    """Cr√©er un nouvel utilisateur"""
    print(f"üë§ Cr√©ation de l'utilisateur {username}...")
    
    # Dremio 26.0 API v3 - payload simplifi√©
    payload = {
        "name": username,
        "firstName": "dbt",
        "lastName": "User",
        "email": f"{username}@example.com",
        "password": password
    }
    
    try:
        # Essayer avec l'API v3
        response = requests.post(
            f"{DREMIO_URL}/api/v3/user",
            json=payload,
            headers={
                "Content-Type": "application/json",
                "Authorization": f"_dremio{token}"
            }
        )
        
        if response.status_code in [200, 201]:
            print(f"‚úÖ Utilisateur {username} cr√©√© avec succ√®s")
            return True
        elif response.status_code == 409:
            print(f"‚ÑπÔ∏è L'utilisateur {username} existe d√©j√†")
            return True
        else:
            print(f"‚ö†Ô∏è R√©ponse API v3: {response.status_code}")
            print(f"   Message: {response.text[:200]}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'utilisateur: {e}")
        return False

def create_space(token, space_name):
    """Cr√©er un espace (space) dans Dremio"""
    print(f"üìÅ Cr√©ation de l'espace {space_name}...")
    
    # Dremio 26.0 API v3
    payload = {
        "entityType": "space",
        "name": space_name,
        "path": [space_name]
    }
    
    try:
        # API v3 pour cr√©er un space
        response = requests.post(
            f"{DREMIO_URL}/api/v3/catalog",
            json=payload,
            headers={
                "Content-Type": "application/json",
                "Authorization": f"_dremio{token}"
            }
        )
        
        if response.status_code in [200, 201]:
            print(f"‚úÖ Espace {space_name} cr√©√©")
            return True
        elif response.status_code == 409:
            print(f"‚ÑπÔ∏è L'espace {space_name} existe d√©j√†")
            return True
        else:
            print(f"‚ö†Ô∏è √âchec cr√©ation espace: {response.status_code}")
            print(f"   Message: {response.text[:200]}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def main():
    print("=" * 60)
    print("üöÄ Configuration automatique de Dremio")
    print("=" * 60)
    
    # 1. Attendre que Dremio soit pr√™t
    if not wait_for_dremio():
        sys.exit(1)
    
    # 2. V√©rifier si premi√®re configuration
    first_time = check_first_time_setup()
    
    if first_time:
        print("\nüìù Premi√®re configuration d√©tect√©e")
        if not create_first_user():
            print("‚ùå √âchec de la cr√©ation de l'admin")
            sys.exit(1)
        time.sleep(2)
    else:
        print("\n‚ÑπÔ∏è Dremio d√©j√† configur√©")
    
    # 3. Se connecter
    token = login(ADMIN_USERNAME, ADMIN_PASSWORD)
    if not token:
        print("\n‚ö†Ô∏è Impossible de se connecter avec admin/admin123")
        print("   Tentative avec credentials existants...")
        # Essayer d'autres credentials communs
        token = login("$dremio", "dremio123")
        if not token:
            print("‚ùå √âchec de connexion")
            print("\nüìù Configuration manuelle requise:")
            print(f"   1. Aller sur {DREMIO_URL}")
            print("   2. Se connecter ou cr√©er un compte admin")
            print(f"   3. Cr√©er l'utilisateur '{NEW_USER_USERNAME}' avec mot de passe '{NEW_USER_PASSWORD}'")
            sys.exit(1)
    
    # 4. Cr√©er l'utilisateur dbt
    if not create_user(token, NEW_USER_USERNAME, NEW_USER_PASSWORD):
        print("‚ö†Ô∏è √âchec de cr√©ation de l'utilisateur")
    
    # 5. Cr√©er les espaces n√©cessaires
    for space in ["raw", "staging", "marts"]:
        create_space(token, space)
    
    print("\n" + "=" * 60)
    print("‚úÖ Configuration termin√©e !")
    print("=" * 60)
    print(f"\nüìã Informations de connexion:")
    print(f"   URL: {DREMIO_URL}")
    print(f"   Utilisateur dbt: {NEW_USER_USERNAME}")
    print(f"   Mot de passe: {NEW_USER_PASSWORD}")
    print(f"\nüìÅ Espaces cr√©√©s: raw, staging, marts")
    print(f"\nüîó Acc√©der √† l'interface: {DREMIO_URL}")

if __name__ == "__main__":
    main()
